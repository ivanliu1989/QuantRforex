{
    "collab_server" : "",
    "contents" : "# 0. Env setup ------------------------------------------------------------\nrm(list = ls()); gc()\nlibrary(AutoPairTrading)\n\n\n# 1. Get Y, X and Price.Ratio ---------------------------------------------\n# tscale <- \"2014-01-01/2016-10-01\"\n# y = AUDUSD[tscale]\n# x = CADUSD[tscale]\n# price.ratio <- getPriceRatio(y, x, FALSE)\n# names(price.ratio) = \"price.ratio\"\n\n\n# 1.2 Extract data from interactive brokers -------------------------------\nCADUSD <- reqHistoryFX(duration = \"10 Y\", barsize = \"1 day\", Cur1 = \"USD\", Cur2 = \"CAD\")$CleanData\nCADUSD <- 1/CADUSD\nAUDUSD <- reqHistoryFX(duration = \"10 Y\", barsize = \"1 day\", Cur1 = \"AUD\", Cur2 = \"USD\")$CleanData\nNZDUSD <- reqHistoryFX(duration = \"10 Y\", barsize = \"1 day\", Cur1 = \"NZD\", Cur2 = \"USD\")$CleanData\n\ntscale <- \"2014-01-01/2016-07-22\"\ny.series = AUDUSD[tscale]\nx.series = CADUSD[tscale]\ny = y.series$Close.price\nx = x.series$Close.price\nprice.ratio <- getPriceRatio(y, x, FALSE)\nnames(price.ratio) = \"price.ratio\"\n\n# 2. Correlation tests ----------------------------------------------------\ncor.test <- CorrelationTest(y, x)\n\n\n# 3. Stationary tests -----------------------------------------------------\nadf.y <- AugmentedDickeyFullerTest(y, type = \"drift\", lags = 1); cat(paste0(\"P-value: \", adf.y$signif[[1]]))\nadf.x <- AugmentedDickeyFullerTest(x, type = \"drift\", lags = 1); cat(paste0(\"P-value: \", adf.x$signif[[1]]))\nadf.y.ret <- AugmentedDickeyFullerTest(ROC(y)[-1], type = \"drift\", lags = 1); cat(paste0(\"P-value: \", adf.y.ret$signif[[1]]))\nadf.x.ret <- AugmentedDickeyFullerTest(ROC(x)[-1], type = \"drift\", lags = 1); cat(paste0(\"P-value: \", adf.x.ret$signif[[1]]))\n\n\n# 4. Cointegration tests --------------------------------------------------\nadf.ratio <- AugmentedDickeyFullerTest(price.ratio, type = \"drift\", lags = 1); cat(paste0(\"P-value: \", adf.ratio$signif[[1]]))\njc.test <- JohansenCointegrationTest(merge(y,x), type = \"trace\", ecdet = \"none\", K = 2); cat(paste0(\"P-value: \", jc.test$signif[[1]]))\n\n\n# 5. Half-life tests ------------------------------------------------------\nhalf.life <- HalfLifeMeanReversion(price.ratio)$half.life.round; cat(paste0(\"Half-Life: \", half.life))\n\n\n# 6. Hurse Exponent tests -------------------------------------------------\nhurst.test <- HurstExponentTest(price.ratio, half.life); cat(paste0(\"Hurse Exponent: \", mean(hurst.test$hurstKY, na.rm = T)))\n\n\n# 7. Hedge Ratio Calculation ----------------------------------------------\nhedgeRatio <- HedgeRatioOLS(y[(length(y)-half.life):length(y)], x[(length(x)-half.life):length(x)])\nhedgeRatio\n\n\n# 8. Preparing the Universe data ------------------------------------------\nhead(SampleUniverse)\nindex(y.series) <- as.Date(index(y.series))\nindex(x.series) <- as.Date(index(x.series))\nindex(price.ratio) <- as.Date(index(price.ratio))\n\nUniverse <- merge(price.ratio, y.series, x.series, SampleUniverse[,-c(1:3)])\nnames(Universe) <- c(\"price.ratio\", \"y.close\", \"y.bid\", \"y.ask\", \"x.close\", \"x.bid\", \"x.ask\", names(SampleUniverse[,-c(1:3)]))\nUniverse <- na.omit(Universe)\n\n# 9. Back Testing ---------------------------------------------------------\ncontext <- InitializeContext(Universe$y.close, Universe$x.close, capital = 1e6, window = 20,\n                             lookback = 252, brokerage = 0.001, stoploss = 0.1, half.life = half.life)\ndt.summary <- BackTestingRealTime(context, Universe, nEval = 350)\ndt.summary <- BackTestingRealTimeBenchmark(context, Universe, nEval = 350)\n\n\n# 10. Performance Analytics -----------------------------------------------\nbasic.report <- performanceReport(dt.summary)\nperformanceEvaluationEmail(basic.report, c(\"ivan.liuyanfeng@gmail.com\"), message = \"Machine Learning and Mean Reversion - Bid & Ask\")\n\n\n# 11. Searching Good Integrated Pairs -------------------------------------\ndata(\"sp500\")\ndatasets <- sp500[,c(50:80)]\nsearchCointegratedPairs(datasets, path = \"GoodIntegratedPairs.pdf\",\n                        to = c(\"ivan.liuyanfeng@gmail.com\", \"ivan@growingdata.com.au\"),\n                        testPeriod = 63, trainPeriod = 252)\n",
    "created" : 1477091422003.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1834059273",
    "id" : "81FE9DD",
    "lastKnownWriteTime" : 1477091456,
    "last_content_update" : 1477091456799,
    "path" : "C:/Users/sky_x/Google Drive/1. Work In Progress/Git Projects/QuantRforex/getUserTemplate.R",
    "project_path" : "getUserTemplate.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}